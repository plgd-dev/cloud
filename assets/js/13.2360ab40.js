(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{382:function(t,e,a){"use strict";a.r(e);var o=a(25),s=Object(o.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"authorization-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#authorization-server"}},[t._v("#")]),t._v(" Authorization Server")]),t._v(" "),a("p",[t._v("Authorization Server authorizes users and devices interacting with the plgd cloud.")]),t._v(" "),a("h2",{attrs:{id:"docker-image"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-image"}},[t._v("#")]),t._v(" Docker Image")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("docker pull plgd/authorization:latest\n")])])]),a("h2",{attrs:{id:"docker-run"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-run"}},[t._v("#")]),t._v(" Docker Run")]),t._v(" "),a("h3",{attrs:{id:"how-to-make-certificates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-make-certificates"}},[t._v("#")]),t._v(" How to make certificates")]),t._v(" "),a("p",[t._v("Before you run docker image of plgd/authorization, you make sure certificates exists on "),a("code",[t._v(".tmp/certs")]),t._v(" folder."),a("br"),t._v("\nIf not exists, you can create certificates from plgd/bundle image by following step only once.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Create local folder for certificates and run plgd/bundle image to execute shell. ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("pwd")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v(".tmp/certs\ndocker run -it "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t--network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("host "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t-v "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("pwd")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("/.tmp/certs:/certs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t-e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("CLOUD_SID")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("00000000-0000-0000-0000-000000000001 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t--entrypoint /bin/bash "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\tplgd/bundle:latest   \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Copy & paste below commands on the bash shell of plgd/bundle container.")]),t._v("\ncertificate-generator --cmd.generateRootCA --outCert"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/certs/root_ca.crt --outKey"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/certs/root_ca.key --cert.subject.cn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("RootCA \ncertificate-generator --cmd.generateCertificate --outCert"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/certs/http.crt --outKey"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/certs/http.key --cert.subject.cn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("localhost --cert.san.domain"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("localhost --signerCert"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/certs/root_ca.crt --signerKey"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/certs/root_ca.key\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Exit shell.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v(" \n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# See common certificates for plgd cloud services.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" .tmp/certs\nhttp.crt\thttp.key\troot_ca.crt\troot_ca.key\n")])])]),a("h3",{attrs:{id:"how-to-get-configuration-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-get-configuration-file"}},[t._v("#")]),t._v(" How to get configuration file")]),t._v(" "),a("p",[t._v("A configuration template is available on "),a("a",{attrs:{href:"https://github.com/plgd-dev/cloud/blob/v2/authorization/config.yaml",target:"_blank",rel:"noopener noreferrer"}},[t._v("authorization/config.yaml"),a("OutboundLink")],1),t._v("."),a("br"),t._v("\nYou can also see "),a("code",[t._v("config.yaml")]),t._v(" configuration file on the "),a("code",[t._v("authorization")]),t._v(" folder by downloading "),a("code",[t._v("git clone https://github.com/plgd-dev/cloud.git")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Copy & paste configuration template from the link and save the file named `authorization.yaml` on the local folder.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vi")]),t._v(" authorization.yaml\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Or download configuration template.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" https://github.com/plgd-dev/cloud/blob/v2/authorization/config.yaml --output authorization.yaml \n")])])]),a("h3",{attrs:{id:"edit-configuration-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#edit-configuration-file"}},[t._v("#")]),t._v(" Edit configuration file")]),t._v(" "),a("p",[t._v("You can edit configuration file including server port, certificates, OAuth provider and so on."),a("br"),t._v("\nRead more detail about how to configure OAuth Provider "),a("a",{attrs:{href:"https://github.com/plgd-dev/cloud/blob/v2/docs/guide/developing/authorization.md#how-to-configure-auth0",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("See an example of address, tls and OAuth config on the followings.")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("grpc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.0.0.0:9081"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tls")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("caPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/root_ca.crt"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("keyFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/http.key"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("certFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/http.crt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("http")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.0.0.0:9085"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tls")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("caPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/root_ca.crt"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("keyFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/http.key"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("certFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/http.crt"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("authorization")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("authority")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://auth.example.com/authorize"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("audience")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://api.example.com"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("http")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tls")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("caPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/root_ca.crt"')]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("keyFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/http.key"')]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("certFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/http.crt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("oauthClients")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("device")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("provider")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"plgd"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("clientID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ij12OJj2J23K8KJs"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("clientSecret")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"654hkja12asd123d"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scopes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"profile,openid,offline_access"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("authorizationURL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://auth.example.com/authorize"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tokenURL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://auth.example.com/oauth/token"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("audience")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://api.example.com"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redirectURL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://localhost:9085/api/authz/callback"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("client")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("clientID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"412dsFf53Sj6$"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("clientSecret")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"235Jgdf65jsd4Shls"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scopes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"openid"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("authorizationURL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://auth.example.com/authorize"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("audience")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://api.example.com"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redirectURL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://localhost:9085/api/authz/callback"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n")])])]),a("h3",{attrs:{id:"run-docker-image"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run-docker-image"}},[t._v("#")]),t._v(" Run docker image")]),t._v(" "),a("p",[t._v("You can run plgd/authorization image using certificates and configuration file on the folder you made certificates.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("docker run -d --network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("host "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t--name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("authorization "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t-v "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("pwd")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("/.tmp/certs:/data/certs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t-v "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("pwd")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("/authorization.yaml:/data/authorization.yaml "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\tplgd/authorization:latest --config"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/data/authorization.yaml\n")])])]),a("h2",{attrs:{id:"yaml-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yaml-configuration"}},[t._v("#")]),t._v(" YAML Configuration")]),t._v(" "),a("h3",{attrs:{id:"logging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logging"}},[t._v("#")]),t._v(" Logging")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Property")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Default")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("log.debug")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("Set to true if you would like to see extra information on logs.")])]),t._v(" "),a("td",[a("code",[t._v("false")])])])])]),t._v(" "),a("h3",{attrs:{id:"grpc-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grpc-api"}},[t._v("#")]),t._v(" gRPC API")]),t._v(" "),a("p",[t._v("gRPC API of the Authorization Server service as defined "),a("a",{attrs:{href:"https://github.com/plgd-dev/cloud/blob/v2/authorization/pb/service_grpc.pb.go#L19",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Property")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Default")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("api.grpc.address")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Listen specification <host>:<port> for grpc client connection.")])]),t._v(" "),a("td",[a("code",[t._v('"0.0.0.0:9100"')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.enforcementPolicy.minTime")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("The minimum amount of time a client should wait before sending a keepalive ping. Otherwise the server close connection.")])]),t._v(" "),a("td",[a("code",[t._v("5s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.enforcementPolicy.permitWithoutStream")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, server allows keepalive pings even when there are no active streams(RPCs). Otherwise the server close connection.")])]),t._v(" "),a("td",[a("code",[t._v("true")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.keepAlive.maxConnectionIdle")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("A duration for the amount of time after which an idle connection would be closed by sending a GoAway. 0s means infinity.")])]),t._v(" "),a("td",[a("code",[t._v("0s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.keepAlive.maxConnectionAge")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("A duration for the maximum amount of time a connection may exist before it will be closed by sending a GoAway. 0s means infinity.")])]),t._v(" "),a("td",[a("code",[t._v("0s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.keepAlive.maxConnectionAgeGrace")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("An additive period after MaxConnectionAge after which the connection will be forcibly closed. 0s means infinity.")])]),t._v(" "),a("td",[a("code",[t._v("0s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.keepAlive.time")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("After a duration of this time if the server doesn't see any activity it pings the client to see if the transport is still alive.")])]),t._v(" "),a("td",[a("code",[t._v("2h")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.keepAlive.timeout")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("After having pinged for keepalive check, the client waits for a duration of Timeout and if no activity is seen even after that the connection is closed.")])]),t._v(" "),a("td",[a("code",[t._v("20s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.tls.caPool")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to the root certificate in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.tls.keyFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to private key in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.tls.certFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to certificate in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.tls.clientCertificateRequired")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, require client certificate.")])]),t._v(" "),a("td",[a("code",[t._v("true")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.authorization.authority")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Endpoint of OAuth provider.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.authorization.audience")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Identifier of the API configured in your OAuth provider.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.authorization.http.maxIdleConns")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("It controls the maximum number of idle (keep-alive) connections across all hosts. Zero means no limit.")])]),t._v(" "),a("td",[a("code",[t._v("16")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.authorization.http.maxConnsPerHost")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("It optionally limits the total number of connections per host, including connections in the dialing, active, and idle states. On limit violation, dials will block. Zero means no limit.")])]),t._v(" "),a("td",[a("code",[t._v("32")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.authorization.http.maxIdleConnsPerHost")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("If non-zero, controls the maximum idle (keep-alive) connections to keep per-host. If zero, DefaultMaxIdleConnsPerHost is used.")])]),t._v(" "),a("td",[a("code",[t._v("16")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.authorization.http.idleConnTimeout")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("The maximum amount of time an idle (keep-alive) connection will remain idle before closing itself. Zero means no limit.")])]),t._v(" "),a("td",[a("code",[t._v("30s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.authorization.http.timeout")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("A time limit for requests made by this Client. A Timeout of zero means no timeout.")])]),t._v(" "),a("td",[a("code",[t._v("10s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.authorization.http.tls.caPool")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to the root certificate in PEM format which might contain multiple certificates in a single file.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.authorization.http.tls.keyFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to private key in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.authorization.http.tls.certFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to certificate in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.grpc.authorization.http.tls.useSystemCAPool")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, use system certification pool.")])]),t._v(" "),a("td",[a("code",[t._v("false")])])])])]),t._v(" "),a("h3",{attrs:{id:"http-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-api"}},[t._v("#")]),t._v(" HTTP API")]),t._v(" "),a("p",[t._v("HTTP API of the Authorization Server service as defined "),a("a",{attrs:{href:"https://github.com/plgd-dev/cloud/blob/v2/authorization/uri/uri.go",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1)]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Property")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Default")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("api.http.address")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Listen specification <host>:<port> for http client connection.")])]),t._v(" "),a("td",[a("code",[t._v('"0.0.0.0:9100"')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.http.tls.caPool")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to the root certificate in PEM format which might contain multiple certificates in a single file.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.http.tls.keyFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to private key in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.http.tls.certFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to certificate in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.http.tls.clientCertificateRequired")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, require client certificate.")])]),t._v(" "),a("td",[a("code",[t._v("true")])])])])]),t._v(" "),a("h3",{attrs:{id:"oauth2-0-client-for-device"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oauth2-0-client-for-device"}},[t._v("#")]),t._v(" OAuth2.0 Client for Device")]),t._v(" "),a("blockquote",[a("p",[t._v("Configured OAuth2.0 client is used to request an authorization code used for onboarding and exchange it for the token during the "),a("a",{attrs:{href:"https://plgd.dev/guide/architecture/component-overview.html#coap-gateway",target:"_blank",rel:"noopener noreferrer"}},[t._v("device registration"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Property")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Default")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("oauthClients.device.provider")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v('Value which comes from the device during the sign-up ("apn").')])]),t._v(" "),a("td",[a("code",[t._v('"generic"')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.clientID")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Client ID to exchange an authorization code for an access token.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.clientSecret")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Client secret to exchange an authorization code for an access token.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.scopes")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Comma separated list of required scopes.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.authorizationURL")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Authorization endpoint of OAuth provider.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.tokenURL")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Token endpoint of OAuth provider.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.audience")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Identifier of the API configured in your OAuth provider.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.redirectURL")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Redirect url used to obtain device access token.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.responseType")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v('One of "code/token".')])]),t._v(" "),a("td",[a("code",[t._v('"code"')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.responseMode")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v('One of "query/post_form".')])]),t._v(" "),a("td",[a("code",[t._v('"post_form"')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.http.maxIdleConns")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("It controls the maximum number of idle (keep-alive) connections across all hosts. Zero means no limit.")])]),t._v(" "),a("td",[a("code",[t._v("16")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.http.maxConnsPerHost")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("It optionally limits the total number of connections per host, including connections in the dialing, active, and idle states. On limit violation, dials will block. Zero means no limit.")])]),t._v(" "),a("td",[a("code",[t._v("32")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.http.maxIdleConnsPerHost")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("If non-zero, controls the maximum idle (keep-alive) connections to keep per-host. If zero, DefaultMaxIdleConnsPerHost is used.")])]),t._v(" "),a("td",[a("code",[t._v("16")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.http.idleConnTimeout")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("The maximum amount of time an idle (keep-alive) connection will remain idle before closing itself. Zero means no limit.")])]),t._v(" "),a("td",[a("code",[t._v("30s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.http.timeout")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("A time limit for requests made by this Client. A Timeout of zero means no timeout.")])]),t._v(" "),a("td",[a("code",[t._v("10s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.http.tls.caPool")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to the root certificate in PEM format which might contain multiple certificates in a single file.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.http.tls.keyFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to private key in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.http.tls.certFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to certificate in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.device.http.tls.useSystemCAPool")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, use system certification pool.")])]),t._v(" "),a("td",[a("code",[t._v("false")])])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Audience")]),t._v(" "),a("p",[t._v("You might have one client, but multiple APIs in the OAuth system. What you want to prevent is to be able to contact all the APIs of your system with one token. This audience allows you to request the token for a specific API. If you configure it to myplgdc2c.api in the Auth0, you have to set it here if you want to also validate it.")])]),t._v(" "),a("h3",{attrs:{id:"oauth2-0-client-for-ui-and-sdk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oauth2-0-client-for-ui-and-sdk"}},[t._v("#")]),t._v(" OAuth2.0 Client for UI and SDK")]),t._v(" "),a("blockquote",[a("p",[t._v("Configured OAuth2.0 client is used by the mobile application or SDK to request a token used to authorize all calls they execute against other plgd APIs.")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Property")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Default")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("oauthClients.client.clientID")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Client ID to exchange an authorization code for an access token.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.client.clientSecret")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Client secret to exchange an authorization code for an access token.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.client.scopes")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Comma separated list of required scopes.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.client.authorizationURL")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Authorization endpoint of OAuth provider.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.client.audience")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Identifier of the API configured in your OAuth provider.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.client.redirectURL")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Redirect url used to obtain device access token.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.client.responseMode")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v('One of "query/post_form".')])]),t._v(" "),a("td",[a("code",[t._v('"post_form"')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.client.http.maxIdleConns")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("It controls the maximum number of idle (keep-alive) connections across all hosts. Zero means no limit.")])]),t._v(" "),a("td",[a("code",[t._v("16")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.client.http.maxConnsPerHost")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("It optionally limits the total number of connections per host, including connections in the dialing, active, and idle states. On limit violation, dials will block. Zero means no limit.")])]),t._v(" "),a("td",[a("code",[t._v("32")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.client.http.maxIdleConnsPerHost")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("If non-zero, controls the maximum idle (keep-alive) connections to keep per-host. If zero, DefaultMaxIdleConnsPerHost is used.")])]),t._v(" "),a("td",[a("code",[t._v("16")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.client.http.idleConnTimeout")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("The maximum amount of time an idle (keep-alive) connection will remain idle before closing itself. Zero means no limit.")])]),t._v(" "),a("td",[a("code",[t._v("30s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.client.http.timeout")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("A time limit for requests made by this Client. A Timeout of zero means no timeout.")])]),t._v(" "),a("td",[a("code",[t._v("10s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.client.http.tls.caPool")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to the root certificate in PEM format which might contain multiple certificates in a single file.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.client.http.tls.keyFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to private key in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.client.http.tls.certFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to certificate in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oauthClients.client.http.tls.useSystemCAPool")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, use system certification pool.")])]),t._v(" "),a("td",[a("code",[t._v("false")])])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Audience")]),t._v(" "),a("p",[t._v("You might have one client, but multiple APIs in the OAuth system. What you want to prevent is to be able to contact all the APIs of your system with one token. This audience allows you to request the token for a specific API. If you configure it to myplgdc2c.api in the Auth0, you have to set it here if you want to also validate it.")])]),t._v(" "),a("h3",{attrs:{id:"storage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#storage"}},[t._v("#")]),t._v(" Storage")]),t._v(" "),a("p",[t._v("Plgd cloud uses MongoDB database as owner's device store.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Property")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Default")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("clients.storage.ownerClaim")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Claim used to identify owner of the device.")])]),t._v(" "),a("td",[a("code",[t._v('"sub"')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.storage.mongoDB.uri")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("URI to mongo database.")])]),t._v(" "),a("td",[a("code",[t._v('"mongodb://localhost:27017"')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.storage.mongoDB.database")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Name of database.")])]),t._v(" "),a("td",[a("code",[t._v('"ownersDevices"')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.storage.mongoDB.tls.caPool")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to the root certificate in PEM format which might contain multiple certificates in a single file.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.storage.mongoDB.tls.keyFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to private key in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.storage.mongoDB.tls.certFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to certificate in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.storage.mongoDB.tls.useSystemCAPool")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, use system certification pool.")])]),t._v(" "),a("td",[a("code",[t._v("false")])])])])]),t._v(" "),a("blockquote",[a("p",[t._v('Note that the string type related to time (i.e. timeout, idleConnTimeout, expirationTime) is decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "1.5h" or "2h45m". Valid time units are "ns", "us", "ms", "s", "m", "h".')])])])}),[],!1,null,null,null);e.default=s.exports}}]);