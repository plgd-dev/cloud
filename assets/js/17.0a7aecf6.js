(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{384:function(t,e,a){"use strict";a.r(e);var s=a(25),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"coap-gateway"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#coap-gateway"}},[t._v("#")]),t._v(" CoAP Gateway")]),t._v(" "),a("p",[t._v("CoAP Gateway provides API for devices and clients following the "),a("a",{attrs:{href:"https://openconnectivity.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Open Connectivity Foundation"),a("OutboundLink")],1),t._v(" specification.")]),t._v(" "),a("h2",{attrs:{id:"docker-image"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-image"}},[t._v("#")]),t._v(" Docker Image")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("docker pull plgd/coap-gateway:latest\n")])])]),a("h2",{attrs:{id:"docker-run"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-run"}},[t._v("#")]),t._v(" Docker Run")]),t._v(" "),a("h3",{attrs:{id:"how-to-make-certificates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-make-certificates"}},[t._v("#")]),t._v(" How to make certificates")]),t._v(" "),a("p",[t._v("Before you run docker image of plgd/coap-gateway, you make sure certificates exists on "),a("code",[t._v(".tmp/certs")]),t._v(" folder."),a("br"),t._v("\nIf not exists, you can create certificates from plgd/bundle image by following step only once.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Create local folder for certificates and run plgd/bundle image to execute shell. ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("pwd")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v(".tmp/certs\ndocker run -it "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t--network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("host "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t-v "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("pwd")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("/.tmp/certs:/certs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t-e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("CLOUD_SID")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("00000000-0000-0000-0000-000000000001 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t--entrypoint /bin/bash "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\tplgd/bundle:latest   \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Copy & paste below commands on the bash shell of plgd/bundle container.")]),t._v("\ncertificate-generator --cmd.generateRootCA --outCert"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/certs/root_ca.crt --outKey"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/certs/root_ca.key --cert.subject.cn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("RootCA \ncertificate-generator --cmd.generateCertificate --outCert"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/certs/http.crt --outKey"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/certs/http.key --cert.subject.cn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("localhost --cert.san.domain"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("localhost --signerCert"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/certs/root_ca.crt --signerKey"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/certs/root_ca.key\ncertificate-generator --cmd.generateIdentityCertificate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CLOUD_SID")]),t._v(" --outCert"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/certs/coap.crt --outKey"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/certs/coap.key --cert.san.domain"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("localhost --signerCert"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/certs/root_ca.crt --signerKey"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/certs/root_ca.key\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Exit shell.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v(" \n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# See common certificates for plgd cloud services.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" .tmp/certs\ncoap.crt\tcoap.key\thttp.crt\thttp.key\troot_ca.crt\troot_ca.key\n")])])]),a("h3",{attrs:{id:"how-to-get-configuration-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-get-configuration-file"}},[t._v("#")]),t._v(" How to get configuration file")]),t._v(" "),a("p",[t._v("A configuration template is available on "),a("a",{attrs:{href:"https://github.com/plgd-dev/cloud/blob/v2/coap-gateway/config.yaml",target:"_blank",rel:"noopener noreferrer"}},[t._v("coap-gateway/config.yaml"),a("OutboundLink")],1),t._v("."),a("br"),t._v("\nYou can also see "),a("code",[t._v("config.yaml")]),t._v(" configuration file on the "),a("code",[t._v("coap-gateway")]),t._v(" folder by downloading "),a("code",[t._v("git clone https://github.com/plgd-dev/cloud.git")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Copy & paste configuration template from the link and save the file named `coap-gateway.yaml` on the local folder.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vi")]),t._v(" coap-gateway.yaml\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Or download configuration template.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" https://github.com/plgd-dev/cloud/blob/v2/coap-gateway/config.yaml --output coap-gateway.yaml \n")])])]),a("h3",{attrs:{id:"edit-configuration-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#edit-configuration-file"}},[t._v("#")]),t._v(" Edit configuration file")]),t._v(" "),a("p",[t._v("You can edit configuration file including server port, certificates, OAuth provider and so on."),a("br"),t._v("\nRead more detail about how to configure OAuth Provider "),a("a",{attrs:{href:"https://github.com/plgd-dev/cloud/blob/v2/docs/guide/developing/authorization.md#how-to-configure-auth0",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("See an example of address, tls and OAuth config on the followings.")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("coap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.0.0.0:5684"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("externalAddress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coap-gw.example.com:5684"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tls")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("caPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/root_ca.crt"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("keyFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/coap.key"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("certFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/coap.crt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("clients")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eventBus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nats")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nats://localhost:4222"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tls")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("caPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/root_ca.crt"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("keyFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/http.key"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("certFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/http.crt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("authorizationServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("grpc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"localhost:9081"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tls")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("caPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/root_ca.crt"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("keyFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/http.key"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("certFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/http.crt"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("oauth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("clientID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"412dsFf53Sj6$"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("clientSecret")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"235Jgdf65jsd4Shls"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scopes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"openid"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tokenURL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://auth.example.com/oauth/token"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("audience")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://api.example.com"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("resourceAggregate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("grpc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"localhost:9083"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tls")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("caPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/root_ca.crt"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("keyFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/http.key"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("certFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/http.crt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("resourceDirectory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("grpc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"localhost:9082"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tls")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("caPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/root_ca.crt"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("keyFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/http.key"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("certFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/certs/http.crt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n")])])]),a("h3",{attrs:{id:"run-docker-image"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run-docker-image"}},[t._v("#")]),t._v(" Run docker image")]),t._v(" "),a("p",[t._v("You can run plgd/coap-gateway image using certificates and configuration file on the folder you made certificates.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("docker run -d --network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("host "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t--name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("coap-gateway "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t-v "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("pwd")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("/.tmp/certs:/data/certs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t-v "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("pwd")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("/coap-gateway.yaml:/data/coap-gateway.yaml "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\tplgd/coap-gateway:latest --config"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/data/coap-gateway.yaml\n")])])]),a("h2",{attrs:{id:"yaml-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yaml-configuration"}},[t._v("#")]),t._v(" YAML Configuration")]),t._v(" "),a("h3",{attrs:{id:"logging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logging"}},[t._v("#")]),t._v(" Logging")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Property")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Default")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("log.debug")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("Set to true if you would like to see extra information on logs.")])]),t._v(" "),a("td",[a("code",[t._v("false")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("log.dumpCoapMessages")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("Set to true if you would like to dump raw messages.")])]),t._v(" "),a("td",[a("code",[t._v("false")])])])])]),t._v(" "),a("h3",{attrs:{id:"coap-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#coap-api"}},[t._v("#")]),t._v(" CoAP API")]),t._v(" "),a("p",[t._v("CoAP API as specified in the "),a("a",{attrs:{href:"https://openconnectivity.org/specs/OCF_Device_To_Cloud_Services_Specification_v2.2.3.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Open Connectivity Foundation - Device to Cloud Services"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Property")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Default")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("api.coap.address")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Listen specification <host>:<port> for coap client connection.")])]),t._v(" "),a("td",[a("code",[t._v('"0.0.0.0:5684"')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.coap.externalAddress")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("External address including public domain/IP for coap client connection.")])]),t._v(" "),a("td",[a("code",[t._v('"coap-gw.example.com:5684"')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.coap.maxMessageSize")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("Max message size which can be send/receive via coap. i.e. 256*1024 = 262144 bytes.")])]),t._v(" "),a("td",[a("code",[t._v("262144")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.coap.goroutineSocketHeartbeat")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Interval time to check live service.")])]),t._v(" "),a("td",[a("code",[t._v("4s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.coap.keepAlive.timeout")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Time limit to close inactive connection.")])]),t._v(" "),a("td",[a("code",[t._v("20s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.coap.blockwiseTransfer.enabled")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, enable blockwise transfer of coap message.")])]),t._v(" "),a("td",[a("code",[t._v("true")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.coap.blockwiseTransfer.blockSize")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("Size of blockwise transfer block.")])]),t._v(" "),a("td",[a("code",[t._v("1024")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.coap.tls.enabled")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, require server certificate for ssl connection.")])]),t._v(" "),a("td",[a("code",[t._v("true")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.coap.tls.caPool")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to the root certificate in PEM format which might contain multiple certificates in a single file.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.coap.tls.keyFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to private key in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.coap.tls.certFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to certificate in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("api.coap.tls.clientCertificateRequired")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, require client certificate.")])]),t._v(" "),a("td",[a("code",[t._v("true")])])])])]),t._v(" "),a("h3",{attrs:{id:"event-bus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-bus"}},[t._v("#")]),t._v(" Event Bus")]),t._v(" "),a("p",[t._v("Plgd cloud uses NATS messaging system as a event bus.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Property")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Default")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("clients.eventBus.goPoolSize")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("Number of routines to process events in projection.")])]),t._v(" "),a("td",[a("code",[t._v("16")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.eventBus.nats.url")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("URL to nats messaging system.")])]),t._v(" "),a("td",[a("code",[t._v('"nats://localhost:4222"')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.eventBus.nats.pendingLimits.msgLimit")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("Limit number of messages in queue. -1 means unlimited")])]),t._v(" "),a("td",[a("code",[t._v("524288")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.eventBus.nats.pendingLimits.bytesLimit")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("Limit buffer size of queue. -1 means unlimited")])]),t._v(" "),a("td",[a("code",[t._v("67108864")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.eventBus.nats.tls.caPool")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("root certificate the root certificate in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.eventBus.nats.tls.keyFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File name of private key in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.eventBus.nats.tls.certFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File name of certificate in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.eventBus.nats.tls.useSystemCAPool")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, use system certification pool.")])]),t._v(" "),a("td",[a("code",[t._v("false")])])])])]),t._v(" "),a("h3",{attrs:{id:"authorization-server-client"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#authorization-server-client"}},[t._v("#")]),t._v(" Authorization Server Client")]),t._v(" "),a("p",[t._v("Client configurations to internally connect to Authorization Server service.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Property")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Default")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.pullFrequency")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Frequency to pull changed user device.")])]),t._v(" "),a("td",[a("code",[t._v("15s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.cacheExpiration")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Expiration time of cached user device.")])]),t._v(" "),a("td",[a("code",[t._v("1m")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.ownerClaim")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Claim used to identify owner of the device.")])]),t._v(" "),a("td",[a("code",[t._v('"sub"')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.grpc.address")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Authoriztion service address.")])]),t._v(" "),a("td",[a("code",[t._v('"127.0.0.1:9100"')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.grpc.tls.caPool")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to the root certificate in PEM format which might contain multiple certificates in a single file.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.grpc.tls.keyFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to private key in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.grpc.tls.certFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to certificate in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.grpc.tls.useSystemCAPool")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, use system certification pool.")])]),t._v(" "),a("td",[a("code",[t._v("false")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.grpc.keepAlive.time")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("After a duration of this time if the client doesn't see any activity it pings the server to see if the transport is still alive.")])]),t._v(" "),a("td",[a("code",[t._v("10s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.grpc.keepAlive.timeout")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("After having pinged for keepalive check, the client waits for a duration of Timeout and if no activity is seen even after that the connection is closed.")])]),t._v(" "),a("td",[a("code",[t._v("20s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.grpc.keepAlive.permitWithoutStream")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, client sends keepalive pings even with no active RPCs. If false, when there are no active RPCs, Time and Timeout will be ignored and no keepalive pings will be sent.")])]),t._v(" "),a("td",[a("code",[t._v("false")])])])])]),t._v(" "),a("h3",{attrs:{id:"oauth2-0-service-client"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oauth2-0-service-client"}},[t._v("#")]),t._v(" OAuth2.0 Service Client")]),t._v(" "),a("blockquote",[a("p",[t._v("Configured OAuth2.0 client is used by internal service to request a token used to authorize all calls they execute against other plgd APIs.")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Property")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Default")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.oauth.clientID")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Client ID to exchange an authorization code for an access token.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.oauth.clientSecret")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Client secret to exchange an authorization code for an access token.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.oauth.scopes")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Comma separated list of required scopes.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.oauth.tokenURL")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Token endpoint of OAuth provider.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.oauth.audience")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Identifier of the API configured in your OAuth provider.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.oauth.verifyServiceTokenFrequency")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Frequency to verify service token.")])]),t._v(" "),a("td",[a("code",[t._v("10s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.oauth.http.maxIdleConns")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("It controls the maximum number of idle (keep-alive) connections across all hosts. Zero means no limit.")])]),t._v(" "),a("td",[a("code",[t._v("16")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.oauth.http.maxConnsPerHost")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("It optionally limits the total number of connections per host, including connections in the dialing, active, and idle states. On limit violation, dials will block. Zero means no limit.")])]),t._v(" "),a("td",[a("code",[t._v("32")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.oauth.http.maxIdleConnsPerHost")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("If non-zero, controls the maximum idle (keep-alive) connections to keep per-host. If zero, DefaultMaxIdleConnsPerHost is used.")])]),t._v(" "),a("td",[a("code",[t._v("16")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.oauth.http.idleConnTimeout")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("The maximum amount of time an idle (keep-alive) connection will remain idle before closing itself. Zero means no limit.")])]),t._v(" "),a("td",[a("code",[t._v("30s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.oauth.http.timeout")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("A time limit for requests made by this Client. A Timeout of zero means no timeout.")])]),t._v(" "),a("td",[a("code",[t._v("10s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.oauth.http.tls.caPool")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to the root certificate in PEM format which might contain multiple certificates in a single file.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.oauth.http.tls.keyFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to private key in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.oauth.http.tls.certFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to certificate in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.authorizationServer.oauth.http.tls.useSystemCAPool")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, use system certification pool.")])]),t._v(" "),a("td",[a("code",[t._v("false")])])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Audience")]),t._v(" "),a("p",[t._v("You might have one client, but multiple APIs in the OAuth system. What you want to prevent is to be able to contact all the APIs of your system with one token. This audience allows you to request the token for a specific API. If you configure it to myplgdc2c.api in the Auth0, you have to set it here if you want to also validate it.")])]),t._v(" "),a("h3",{attrs:{id:"resource-aggregate-client"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resource-aggregate-client"}},[t._v("#")]),t._v(" Resource Aggregate Client")]),t._v(" "),a("p",[t._v("Client configurations to internally connect to Resource Aggregate service.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Property")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Default")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("clients.resourceAggregate.grpc.address")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Resource aggregate service address.")])]),t._v(" "),a("td",[a("code",[t._v('"127.0.0.1:9100"')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.resourceAggregate.grpc.tls.caPool")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to the root certificate in PEM format which might contain multiple certificates in a single file.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.resourceAggregate.grpc.tls.keyFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to private key in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.resourceAggregate.grpc.tls.certFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to certificate in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.resourceAggregate.grpc.tls.useSystemCAPool")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, use system certification pool.")])]),t._v(" "),a("td",[a("code",[t._v("false")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.resourceAggregate.grpc.keepAlive.time")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("After a duration of this time if the client doesn't see any activity it pings the server to see if the transport is still alive.")])]),t._v(" "),a("td",[a("code",[t._v("10s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.resourceAggregate.grpc.keepAlive.timeout")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("After having pinged for keepalive check, the client waits for a duration of Timeout and if no activity is seen even after that the connection is closed.")])]),t._v(" "),a("td",[a("code",[t._v("20s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.resourceAggregate.grpc.keepAlive.permitWithoutStream")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, client sends keepalive pings even with no active RPCs. If false, when there are no active RPCs, Time and Timeout will be ignored and no keepalive pings will be sent.")])]),t._v(" "),a("td",[a("code",[t._v("false")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.resourceAggregate.deviceStatusExpiration.enabled")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If ture, refresh device online status in short time than sign token expires.")])]),t._v(" "),a("td",[a("code",[t._v("false")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.resourceAggregate.deviceStatusExpiration.ExpiresIn")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("Interval time to refresh device online status.")])]),t._v(" "),a("td",[a("code",[t._v("24h")])])])])]),t._v(" "),a("h3",{attrs:{id:"resource-directory-client"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resource-directory-client"}},[t._v("#")]),t._v(" Resource Directory Client")]),t._v(" "),a("p",[t._v("Client configurations to internally connect to Resource Directory service.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Property")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Default")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("clients.resourceDirectory.grpc.address")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Resource directory service address.")])]),t._v(" "),a("td",[a("code",[t._v('"127.0.0.1:9100"')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.resourceDirectory.grpc.tls.caPool")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to the root certificate in PEM format which might contain multiple certificates in a single file.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.resourceDirectory.grpc.tls.keyFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to private key in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.resourceDirectory.grpc.tls.certFile")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("File path to certificate in PEM format.")])]),t._v(" "),a("td",[a("code",[t._v('""')])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.resourceDirectory.grpc.tls.useSystemCAPool")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, use system certification pool.")])]),t._v(" "),a("td",[a("code",[t._v("false")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.resourceDirectory.grpc.keepAlive.time")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("After a duration of this time if the client doesn't see any activity it pings the server to see if the transport is still alive.")])]),t._v(" "),a("td",[a("code",[t._v("10s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.resourceDirectory.grpc.keepAlive.timeout")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("After having pinged for keepalive check, the client waits for a duration of Timeout and if no activity is seen even after that the connection is closed.")])]),t._v(" "),a("td",[a("code",[t._v("20s")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("clients.resourceDirectory.grpc.keepAlive.permitWithoutStream")])]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td",[a("code",[t._v("If true, client sends keepalive pings even with no active RPCs. If false, when there are no active RPCs, Time and Timeout will be ignored and no keepalive pings will be sent.")])]),t._v(" "),a("td",[a("code",[t._v("false")])])])])]),t._v(" "),a("h3",{attrs:{id:"task-queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#task-queue"}},[t._v("#")]),t._v(" Task Queue")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Property")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Default")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("taskQueue.goPoolSize")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("Maximum number of running goroutine instances.")])]),t._v(" "),a("td",[a("code",[t._v("1600")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("taskQueue.size")])]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[a("code",[t._v("Size of queue. If it exhausted, submit returns error.")])]),t._v(" "),a("td",[a("code",[t._v("2097152")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("taskQueue.maxIdleTime")])]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[a("code",[t._v("Sets up the interval time of cleaning up goroutines. Zero means never cleanup.")])]),t._v(" "),a("td",[a("code",[t._v("10m")])])])])]),t._v(" "),a("blockquote",[a("p",[t._v('Note that the string type related to time (i.e. timeout, idleConnTimeout, expirationTime) is decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "1.5h" or "2h45m". Valid time units are "ns", "us", "ms", "s", "m", "h".')])])])}),[],!1,null,null,null);e.default=r.exports}}]);